import assert from 'assert/strict'

import { describe, it, context } from 'minispec'

import {parse} from '../src/parser.js'
import {tokenize} from '../src/tokenizer.js'

// Actually I don't really care about these tests. I don't want them. Only compile and end result.
// I don't care about the way they are implemented. Just the end result.
// TODO: Test inside test_compiler for each thing that can be chained that it works.

// I do care for priority of operations though, I think

describe "Parse operation" do

  it '1 + 2' do
    let list = parse(tokenize("1+2").children)
    assert.equal(list?.length, 1)
    let ast = list[0]
    assert.equal(ast?.raw, '+')
    assert.equal(ast?.operands?.[0]?.raw, '1')
    assert.equal(ast?.operands?.[1]?.raw, '2')
  end

  it '2 + 3 * 4 + 5 == 19' do
    let list = parse(tokenize("2 + 3 * 4 + 5 == 19").children)
    assert.equal(list?.length, 1)
    let ast = list[0]
    assert.equal(ast?.raw, '==')
    assert.equal(ast?.operands?.[0]?.raw, '+')
    assert.equal(ast?.operands?.[0]?.operands?.[0]?.raw, '+')
    assert.equal(ast?.operands?.[0]?.operands?.[0]?.operands?.[0]?.raw, '2')
    assert.equal(ast?.operands?.[0]?.operands?.[0]?.operands?.[1]?.raw, '*')
    assert.equal(ast?.operands?.[0]?.operands?.[0]?.operands?.[1]?.operands?.[0]?.raw, '3')
    assert.equal(ast?.operands?.[0]?.operands?.[0]?.operands?.[1]?.operands?.[1]?.raw, '4')
    assert.equal(ast?.operands?.[0]?.operands?.[1]?.raw, '5')
    assert.equal(ast?.operands?.[1]?.raw, '19')
  end
end

describe "Parse let assignment" do

  it 'let x' do
    let list = parse(tokenize("let x").children)
    assert.equal(list?.length, 1)
    let ast = list[0]
    assert.equal(ast?.raw, 'let x')
  end

  it 'let x;' do
    let list = parse(tokenize("let x;").children)
    assert.equal(list?.length, 2)
    let ast = list[0]
    assert.equal(ast?.raw, 'let x')
  end

  it 'let x; let y' do
    let list = parse(tokenize("let x; let y").children)
    assert.equal(list?.length, 3)
    assert.equal(list[0]?.raw, 'let x')
    assert.equal(list[2]?.raw, 'let y')
  end

  it '[1][0]' do
    let list = parse(tokenize("[1][0]").children)
    assert.equal(list?.length, 1)
    let ast = list[0]
    assert.equal(ast?.parts?.length, 3) // [, 1, ]
    assert.equal(ast?.operands?.length, 1)
    assert.equal(ast?.operands?.[0]?.parts?.length, 3) // [, 0, ]
  end

end