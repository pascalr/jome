{
  "version": 3,
  "sources": ["../src/parse_js.js", "../src/light_editor.js", "../samples/torque_calculator.js.txt"],
  "sourcesContent": ["const BLOCK_JS = 'js'\nconst BLOCK_JOME = 'block'\nconst BLOCK_WHITESPACE = 'space'\nconst BLOCK_CAPTURE = 'capture'\n\nfunction extractBlockComment(str) {\n  let i, result = \"/*\";\n  for (i = 2; i < str.length && !(str[i] === '*' && str[i + 1] === '/'); i++) {\n    result += str[i];\n  }\n  if (str[i+2] === '\\n') {return result+'*/\\n'}\n  return (i < str.length) ? result+'*/' : result\n}\n\nfunction extractQuote(str) {\n  let i, ch = str[0]\n  let result = ch;\n  for (i = 1; i < str.length && (str[i] !== ch || str[i - 1] === '\\\\'); i++) {\n    result += str[i];\n  }\n  return (i < str.length) ? result+ch : result\n}\n\nfunction extractSingleLineComment(str) {\n  let i, result = \"\";\n  for (i = 0; i < str.length && (str[i] !== '\\n'); i++) {\n    result += str[i];\n  }\n  return (i < str.length) ? result+'\\n' : result\n}\n\n// Split the js code into blocks of different kinds like mardown, source code, data...\nfunction parseJs(code) {\n  let parts = [] // {type: ..., value: ...}\n\n  let i = 0;\n  let length = code.length;\n  let js = \"\"\n  let str;\n\n  while (i < length) {\n    // TODO: Template literals\n    // strings\n    if (code[i] === '\"' || code[i] === \"'\") {\n      str = extractQuote(code.slice(i))\n      js += str;\n      i = i + (str.length || 1);\n      continue;\n    // commments OR jome block\n    } else if (code[i] === '/' && code[i + 1] === '/') {\n      str = extractSingleLineComment(code.slice(i))\n    // comments or jome block\n    } else if (code[i] === '/' && code[i + 1] === '*') {\n      str = extractBlockComment(code.slice(i))\n    } else {\n      js += code[i]; i++; continue;\n    }\n    // comments OR jome block only executes this code\n    if (str[2] === '~') {\n      if (js.length) {parts.push({type: BLOCK_JS, value: js}); js = \"\"}\n      parts.push({type: BLOCK_JOME, value: str})\n    } else {\n      js += str;\n    }\n    i = i + (str.length || 1);\n  }\n  if (js.length) {parts.push({type: BLOCK_JS, value: js}); js = \"\"}\n\n  // Analyze the blocks\n  parts = parts.map(p => {\n    \n    // Converts matching blocks to type whitespace\n    if (p.type === BLOCK_JS && /^\\s*$/.test(p.value)) {\n      return {type: BLOCK_WHITESPACE, value: p.value}\n    \n      // Groups blocks between the ~begin and ~end into a capture block\n    } else if (p.type === BLOCK_JOME && p.value.slice(2,8) === \"~begin\") {\n      return {type: BLOCK_CAPTURE, value: p.value}\n      // TODO: Capture nested blocks until the end tag is reached\n    }\n    return p\n  })\n\n  return parts\n}\n\nmodule.exports = {BLOCK_JS, BLOCK_JOME, BLOCK_WHITESPACE, BLOCK_CAPTURE, parseJs}", "// import mdToHtml from \"@jome/md-to-html\"\n\nimport {parseJs} from './parse_js'\n\nimport sample01 from '../samples/torque_calculator.js.txt'\n\n// Create an instance of ESLint with the configuration passed to the function\n// function createESLintInstance(overrideConfig) {\n//   return new ESLint({\n//     overrideConfigFile: true,\n//     overrideConfig,\n//     fix: true,\n//   });\n// }\n\n/**\n * The data analyzed inside a jome meta data comment delimited by `/*~` and *\\/`\n */\nclass MetaData {\n  constructor(type, value) {\n    this.type = type // The main type of the meta data. Ex: unit, function, class, md, ...\n    this.value = value // The text value of the meta data.\n  }\n}\n\nfunction parseMetaDatas(metaDataComments) {\n  const metaDatas = []\n  metaDataComments.forEach(data => {\n    // FIXME: parse properly so not spliting inside string\n    let parts = data.value.split(/(~\\w+)/g)\n    if (parts.length >= 3) {\n      metaDatas.push(new MetaData(parts[1].slice(1), parts[2]))\n    }\n    // for (let i = 1; i < parts.length; i++) {\n    //   let label = parts[i].slice(1)\n    //   let value = parts[i+1]\n    //   metaData[label] = value\n    // }\n  })\n  console.log(\"metaDatas: \", metaDatas)\n  return metaDatas\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  let src = sample01\n  let parts = parseJs(src)\n  console.log(\"parts\", parts)\n  document.getElementById('output-editor').innerHTML = renderOutputCode(src, parts)\n  document.getElementById('notebook-editor').innerHTML = renderNotebookView(src, parts)\n});\n\nfunction renderJomeCode(raw, parts) {\n  return ''\n}\n\nfunction renderNotebookView(raw, parts) {\n  return ''\n}\n\nfunction renderOutputCode(raw, parts) {\n  return hljs.highlight(raw, {language: 'js'}).value\n}", "//~jome 0.0.1\n\n/*~md\n# Torque Calculator Example\n*/\n\n//~begin input {unit: \"N*\", comment: \"Newtons or equivalent\", onSave: \"setValue\"}\n  let force;\n//~end\n//~begin input {unit: \"m*\", comment: \"meters or equivalent\", onSave: \"setValue\"}\n  let distance;\n//~end\n\n/*~with\n~arg force, ~unit N*, ~comment Newtons or equivalent\n~arg distance, ~unit m*, ~comment meters or equivalent\n*/\nlet force, distance;\n\n\n/*~md Torque is the result of a force multiplied by a distance from a pivot point. */\n\n// We use a jome tag because it's a script that can be run\n// The unit checker can infer that this block returns a value\n// with N*m or equivalent as a unit and shows it.\n\n/*~main\n~arg force, ~unit N*, ~comment Newtons or equivalent\n~arg distance, ~unit m*, ~comment meters or equivalent\n*/\nfunction main(force, distance) {\n  //~run\n  return force * distance; // the last value from a Jome tag is returned\n  //~end\n}\n\n//~begin main\n  //~arg force, ~unit N*, ~comment Newtons or equivalent\n  //~arg distance, ~unit m*, ~comment meters or equivalent\n  function main(force, distance) {\n    //~run\n    return force * distance; // the last value from a Jome tag is returned\n    //~end\n  }\n//~end"],
  "mappings": "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",
  "names": ["parseJs"]
}
