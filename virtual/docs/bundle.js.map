{
  "version": 3,
  "sources": ["../samples/torque_calculator.js.txt", "../src/light_editor.js"],
  "sourcesContent": ["//~jome 0.0.1\n\n/*~md\n# Torque Calculator Example\n*/\n\n//~input {unit: \"N*\", comment: \"Newtons or equivalent\", onSave: \"setValue\"}\n  let force;\n//~end\n//~input {unit: \"m*\", comment: \"meters or equivalent\", onSave: \"setValue\"}\n  let distance;\n//~end\n\n/*~with\n~arg force, ~unit N*, ~comment Newtons or equivalent\n~arg distance, ~unit m*, ~comment meters or equivalent\n*/\nlet force, distance;\n\n\n/*~md Torque is the result of a force multiplied by a distance from a pivot point. */\n\n// We use a jome tag because it's a script that can be run\n// The unit checker can infer that this block returns a value\n// with N*m or equivalent as a unit and shows it.\n\n/*~main\n~arg force, ~unit N*, ~comment Newtons or equivalent\n~arg distance, ~unit m*, ~comment meters or equivalent\n*/\nfunction main(force, distance) {\n  //~run\n  return force * distance; // the last value from a Jome tag is returned\n  //~end\n}\n\n//~main\n  //~arg force, ~unit N*, ~comment Newtons or equivalent\n  //~arg distance, ~unit m*, ~comment meters or equivalent\n  function main(force, distance) {\n    //~run\n    return force * distance; // the last value from a Jome tag is returned\n    //~end\n  }\n//~end", "// import mdToHtml from \"@jome/md-to-html\"\n\nimport sample01 from '../samples/torque_calculator.js.txt'\n\n// Create an instance of ESLint with the configuration passed to the function\n// function createESLintInstance(overrideConfig) {\n//   return new ESLint({\n//     overrideConfigFile: true,\n//     overrideConfig,\n//     fix: true,\n//   });\n// }\n\n/**\n * The data analyzed inside a jome meta data comment delimited by `/*~` and *\\/`\n */\nclass MetaData {\n  constructor(type, value) {\n    this.type = type // The main type of the meta data. Ex: unit, function, class, md, ...\n    this.value = value // The text value of the meta data.\n  }\n}\n\nfunction parseMetaDatas(metaDataComments) {\n  const metaDatas = []\n  metaDataComments.forEach(data => {\n    // FIXME: parse properly so not spliting inside string\n    let parts = data.value.split(/(~\\w+)/g)\n    if (parts.length >= 3) {\n      metaDatas.push(new MetaData(parts[1].slice(1), parts[2]))\n    }\n    // for (let i = 1; i < parts.length; i++) {\n    //   let label = parts[i].slice(1)\n    //   let value = parts[i+1]\n    //   metaData[label] = value\n    // }\n  })\n  console.log(\"metaDatas: \", metaDatas)\n  return metaDatas\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  let src = sample01\n  let data = parseJs(src)\n  document.getElementById('output-editor').innerHTML = renderOutputCode(data)\n  document.getElementById('notebook-editor').innerHTML = renderNotebookView(data)\n});\n\n// Split the js code into blocks of different kinds like mardown, source code, data...\nfunction parseJs(js) {\n  return {raw: js}\n}\n\nfunction renderJomeCode(data) {\n  return ''\n}\n\nfunction renderNotebookView(data) {\n  return ''\n}\n\nfunction renderOutputCode(data) {\n  return hljs.highlight(data.raw, {language: 'js'}).value\n}"],
  "mappings": ";;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACyCA,WAAS,iBAAiB,oBAAoB,WAAW;AACvD,QAAI,MAAM;AACV,QAAI,OAAO,QAAQ,GAAG;AACtB,aAAS,eAAe,eAAe,EAAE,YAAY,iBAAiB,IAAI;AAC1E,aAAS,eAAe,iBAAiB,EAAE,YAAY,mBAAmB,IAAI;AAAA,EAChF,CAAC;AAGD,WAAS,QAAQ,IAAI;AACnB,WAAO,EAAC,KAAK,GAAE;AAAA,EACjB;AAMA,WAAS,mBAAmB,MAAM;AAChC,WAAO;AAAA,EACT;AAEA,WAAS,iBAAiB,MAAM;AAC9B,WAAO,KAAK,UAAU,KAAK,KAAK,EAAC,UAAU,KAAI,CAAC,EAAE;AAAA,EACpD;",
  "names": []
}
