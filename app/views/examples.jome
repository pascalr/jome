import {AppPage} from '../lib/app.jome'

// class Row {
//   // TODO
//   print: => <html>
//     <div class="d-flex">
//       <%= @->children.map(c => c.print()).join('\n') %>
//     </div>
//   </html>
// }

// idee = <Container>
//   <Row>
//     <Col></Col>
//     <Col></Col>
//   </Row>
// </Container>

// «
//   Row
//     Div
//       List
//         Item "Snake", url: "#"
//         Item t("Snake"), url: "#"
//         Item "Snake", url: "#"
//         Item "Snake", url: "#"
//         Item "Snake", url: "#"
// »

// jome tag should do three things
// give string of jome code
// give string of compiled js code
// give a function of jome code (or simply eval js code?)
// jomeCode = <jome>
//   x = 10
// </jome>
// but this could be something implemented only for here, because it is usefull only here

class Example |data| => {
  toString: => (

  let src = <md>
```jome
<%= data.src %>
```
</md>

<html>
  <div class='example'>
    <div class='onglets'>
      <div class='active'>Code</div>
      <div>Compilé</div>
      <div>Résultat</div>
    </div>
    <div class='example-content'>
      <%= src %>
    </div>
  </div>
</html>
  )
}

class DynamicRenderer {
  constructor: => (
    @objsById = {}
    @scope = "" // A prefix to add to ids to make them unique
    @idCounters = {} // The keys are the class names (obj.constructor.name), the values start at 1 and get incremented everytime
  )
  getObjId: |obj| => (
    let type = obj.constructor.name
    let nb = (@idCounters[type]) ? (@idCounters[type]+1) : 1
    @idCounters[type] = nb
    `{@scope ? (@scope+'-') : ''}{type}-{nb}`
  )
  render: |obj| => (
    let id = @getObjId(obj)
    @objsById[id] = obj
    <html><div id="<%= id %>"></div></html>
  ),
  script: => (
    // obj.#id

    let code = @objsById.#keys.map(id => (
      let obj2 = @objsById[id]
      `document.getElementById("{id}").innerHTML = "{obj2.toString()}"`
    )).join('\n')
    //let code = "document.getElementById('todo-obj-unique-id').innerHTML = 'Worksworksworks'"
    <html>
      <script defer>
        <%= code %>
      </script>
    </html>  
  )
}

let dynamic = {DynamicRenderer}

/*
<html>
  ...
  ...
  <%= dynamicElement({
    Div ~click: |foo| => ()
      Span
  }) %>
</html>
*/

def showExample = |data| => (
  
  let src = <md>
```jome
<%= data.src %>
```
</md>

<html>
  <div class='example'>
    <div class='onglets'>
      <div class='active'>Code</div>
      <div>Compiled</div>
      <div>Output</div>
    </div>
    <div class='example-content'><%= src %></div>
  </div>
</html>
)

// Comment gérer le state?
// Dans le fond, je veux mettre du code javascript dans la page qui génère dynamiquement du HTML.
// Je vais probablement devoir utiliser une librairie à rajouter dans le package jome
// renderHTML ou qqchose du genre, lire ce que j'avais pensé déjà

// TODO: Hello world example, see jome code, js code and output result
let helloWorld = {
  src: '#log("Hello world!")'
  js: 'console.log("Hello world!")'
  out: 'Hello world!'
}

let conten = <md>
  ## Jome examples

  <h3>Testing 1212</h3>
</md> + dynamic.render({Example helloWorld}) + // OPTIMIZE: Une syntaxe pour éviter d'avoir à faire ça
dynamic.render({Example helloWorld}) +
<md>

  <h3 id="hello-world">Hello world</h3>

  <%= showExample(helloWorld) %>

  <h3 id="html-library">Html library</h3>
  
  ```jome
  html = «
    IFrame // for demo only
      Html title: 'My html page'
        page: Col
          navbar: Row
            Link 'Some page'
            Link 'Another page'
            Link 'Yet another page'
  »
  ```

  <h3 id="snake">Snake</h3>

  <h3 id="html-button">Html button</h3>
  
  ```jome
  import {Btn, Txt, renderHTML} from "html"

  renderHTML(target: '#div-id', {
    Btn %count: 0, ~click: => (%count += 1)
      Txt => "Clicked {%count} {%count == 1 ? 'time' : 'times'}"
  })
  ```

  Example compiled JavaScript output:
  ```js
  import jome from 'jome_lib'
  import {Btn, Txt, renderHTML} from "html"

  var btn

  // Add a button to the scene which has a text as a children
  btn = new Btn({__signal__click: () => {this.count += 1}})
  btn.count = 0
  jome.createObj($, btn)
  jome.createObj($.$.$btn, new Txt(() => (
    `Clicked ${this.count} ${this.count == 1 ? 'time' : 'times'}`
  )))

  // Compile all the objects of the scene and write the html to #jome-placeholder div
  renderHTML({target: 'jome-placeholder'}, $)
  ```

  ## Recipe?

  ```jome
  {
    Recipe
      attr
        name: 'Chickpea balls'
        prepare: 1h
      Ing 1cup, "dry chickpeas"
      Ing 2cup, "water"
      Ing 2tbsp, "parmesan"
      Step `Put {@1} into {@2}...` // @1 is the first children
      Step "Mix ..."
      Step "Blah blah ..."
  }
  ```

  ## A format database like?

  ```jome
  data = {
    "comma", "separated", "values"
    1,       "foo",       10.0
    2,       "bar",       20.0
  }
  ```
  <csv>
    "comma", "separated", "values"
    1,       "foo",       10.0
    2,       "bar",       20.0
  </csv>

  ## Sqlite3 export to CSV JavaScript

  Faire un petit script en Jome qui convertit un fichier .sqlite3 en un dossier avec des .csv pour chaques table un .csv pour le metadata

  TODO: Save metadata too.

  ```jome
  let tables = <sh>sqlite3 < % = ARGV[1] % > ".table"</sh>
  <sh>mkdir < % = ARGV[2] % ></sh>
  tables#each(table => (
    <sh>sqlite3 -header -csv < % = ARGV[1] % > "select * from < % = table % >;" > < % = table % >.csv</sh>
  ))
  ```

</md> + dynamic.script()

main {
  AppPage title: 'Jome examples', content: conten
}.toString()