import {AppPage} from '../lib/app.jome'

// {
//   // Use IntelliSense to learn about possible attributes.
//   // Hover to view descriptions of existing attributes.
//   // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
//   "version": "0.2.0",
//   "configurations": [
//     {
//       "type": "node",
//       "request": "launch",
//       "name": "Run server",
//       "skipFiles": [
//         "<node_internals>/**"
//       ],
//       "runtimeArgs": ["jome.js", "server.jome"],
//       "program": "${workspaceFolder}/jome.js"
//     },
//     {
//       "type": "node",
//       "request": "launch",
//       "name": "Run tests",
//       "skipFiles": [
//         "<node_internals>/**"
//       ],
//       "runtimeArgs": ["jome.js", "test.jome"],
//       "program": "${workspaceFolder}/jome.js"
//     },
//   ]
// }

content2 = <md>
  ## Compiling

  FIXME: This has changed a lot. I don't want to do something similar to CoffeeScript with jomec.

  I want more to execute files directly.

  DEPRECATED:

  For compiling you need jomec.

  <h3 id="jomec">jomec</h3>

  ```sh
  # Usage
  jomec # compiles based on jomeconfig.json
  jomec "file.jome" # compile the given file and it's dependencies
  jomec "views/*.jome" # compile all the files that matches the path and their dependencies
  ```

  <h3 id="jomeconfig">jomeconfig.jome</h3>

  Example config file:
  ```jome
  import {JomeConfig} from 'jome-config'

  {
    JomeConfig
      compilerOptions:
        outDir = "docs"
        removeComments = true
        sourceMap = true
        addReturnStatements = true
      files = [
        "views/*.jome"
      ]
  }
  ```

  <h3>jomeconfig.json</h3>

  Example config file:
  
  ```json
  {
    "compilerOptions": {
      "outDir": "docs",
      "removeComments": true,
      "sourceMap": true
    },
    "files": [
      "views/*.jome"
    ]
  }
  ```

  TODO: List all the possible options
</md>

main {
  AppPage title: 'Compiling Jome', content: content2
}.toString()