with
  f // aka force // FIXMEEEEEEEE false is not tokenized properly...
end
let force = f

/*
def build(source, dest)
  #watch './views/test.jome' do |file|
    #write '../docs/test/index.html', require(file.path), overwrite!, makeParent!
  end
end

TODO: (but later) Implement a #watch function and give it the folder website for example, and anytime there is a change, then
to recompile the file.

TODO: Implement a compile method that checks if the modification of the compiled file is later than the modification
of the source file.

#compile takes one are two arguments, by default the second argument is the same, but by removing the .jome extension

#compile './views/test.jome', '../docs/test/index.html'
*/

#build(#./views/test.html.jome, #../docs/test/index.html, force: force) // :force
#build(#./views/librairies.html.jome, #../docs/lib/index.html, force: force)
#build(#./views/utils.html.jome, #../docs/utils/index.html, force: force)
#build(#./views/home.html.jome, #../docs/index.html, force: force)

// TODO: Copy reset.css and jome-html.css too?
// #cp #./css/reset.css, #../docs/
// Noooo, use #sync instead of copy, the difference is that sync would check if it needs to be copied or not
// TODO: Sync favicon

// Create utils #cp, #ls, #mkdir, #cd, #cat, #whoami ??
// To list files in current file directory, #ls #. // That would be nice
// ls, cd, cp, mv, rm, mkdir, rmdir, chmod, chown, ps, kill, grep, man, pwd, echo, cat, head, tail
#build(#./css/stylesheet.css.jome, #../docs/stylesheet.css, force: force)