// At first, I will just do everything I need to do here, after I will abstract it to be used by jomec.

import {globSync} from 'glob'
import fs from 'fs'
import path from 'path'

import { JomeBuilder } from './src/builder.js'
import {ExpressServer} from './lib/express_server.jome'

$URL = '/jome'

// Take the files, compile them as .js files inside a hidden .jome folder
// Then write a build.jome file inside the hidden .jome folder that simply imports
// the default from every compiled file, and write the result into the out directory.

let tmpDirName = '.jome/'
// The absolute path to the directory to contain the intermediary build files and and build runtime file.
let tmpDir = path.join(__dirname, tmpDirName)
// The name of the build directory inside the temporary directy
let buildDirName = 'build'
// The absolute path of the intermediary build directory
let buildDir = path.join(tmpDir, buildDirName)
// The absolute path of the output directory
let outDir = path.join(__dirname, 'docs/')

<sh>
  touch .jome/useless # Otherwise rm complains when the folder is empty
  touch docs/useless # Otherwise rm complains when the folder is empty
  rm -R .jome/* # FIXME: Use the variables above 
  rm -R docs/* # FIXME: Use the variables above
</sh>

// let code = 'import fs from "fs";\n'
{
JomeBuilder projectAbsPath: __dirname, buildAbsPath: buildDir, outDir: outDir // FIXME: :outdir
  asset 'node_modules/highlight.js/styles/default.min.css', as: 'highlight.js.min.css'
  // asset 'reset.css'
  src 'app/css/stylesheet.jome', as: 'stylesheet.css'
  src 'app/views/home.jome', as: 'index.html'
  src 'app/views/examples.jome', as: 'ex/index.html'
  src 'app/views/librairies.jome', as: 'lib/index.html'
  src 'app/views/lib/html.jome', as: 'lib/html/index.html'
  src 'app/views/editor.jome', as: 'editor/index.html'
  src 'app/views/compiling.jome', as: 'compiling/index.html'
  src 'app/views/home.jome', as: 'index.html'

ExpressServer port: 3000
  useStatic '/jome', 'docs'
  get '/', |req, res| => (
    res.redirect('/jome')
  )
  run
}











// FIXME: imports, import should not be a keyword here...

// code = code + @`

// function saveFile(name, content) {
//   fs.writeFileSync(name, content, (err) => {
//     if (err) {
//       console.error(err);
//     } else {
//       console.log('File has been written.', name);
//     }
//   });
// }

// `

// files.forEach(|file, i| => (
//   let ext2 = `.{file.type}.js`
//   let f2
//   if (file.type === 'html' && useIndexHtmlFiles) (
//     f2 = outDir+path.basename(file.relPath).slice(0, -5)+'/index.html'
//   ) else (
//     f2 = outDir+path.basename(file.relPath).slice(0, -5)+ext2.slice(0,-3)
//   )
//   code = code + `saveFile("{f2}", imp{i})`+'\n' // FIXME parse newline at the end
//   "FIXME"
// ))

// let linker = './.jome/build.js'
// fs.writeFileSync(linker, code)
// await import(linker);