// At first, I will just do everything I need to do here, after I will abstract it to be used by jomec.

import {globSync} from 'glob'
import fs from 'fs'
import path from 'path'

import { JomeBuilder } from './src/builder.js';

// THE FILES MUST NOT ONLY BE COMPILED, THEY MUST BE RUN...

// Take the files, compile them as .js files inside a hidden .jome folder
// Then write a build.jome file inside the hidden .jome folder that simply imports
// the default from every compiled file, and write the result into the out directory.

let cssFiles = globSync('app/css/*.jome')
let htmlFiles = globSync('app/views/*.jome')

console.log('htmlFiles', htmlFiles)

let tmpDirName = '.jome/'
// The absolute path to the directory to contain the intermediary build files and and build runtime file.
let tmpDir = path.join(__dirname, tmpDirName)
// The name of the build directory inside the temporary directy
let buildDirName = 'build'
// The absolute path of the intermediary build directory
let buildDir = path.join(tmpDir, buildDirName)
// The absolute path of the output directory
let outDir = path.join(__dirname, 'docs/')

<sh>
  touch .jome/useless # Otherwise rm complains when the folder is empty
  touch docs/useless # Otherwise rm complains when the folder is empty
  rm -R .jome/* # FIXME: Use the variables above 
  rm -R docs/* # FIXME: Use the variables above
</sh>

let files = []
cssFiles.forEach(file => (
  // Ext is required here to tell how to compile these files
  files.push({relPath: file, type: 'css'})
))

htmlFiles.forEach(file => (
  // Ext is required here to tell how to compile these files
  files.push({relPath: file, type: 'html'})
))

let useIndexHtmlFiles = true

// let code = 'import fs from "fs";\n'
let builder = {JomeBuilder projectAbsPath: __dirname, buildAbsPath: buildDir}

/*
{
  JomeBuilder
    html 'views/'
    css 'css/'
    js 'lib/'
    root '/home'
}
*/

saveFile = |name, content| -> (
  let direct = path.dirname(name)
  if (!fs.existsSync(direct)) (
    fs.mkdirSync(direct, { recursive: true })
  )
  fs.writeFileSync(name, content, |err| => (
    if (err) (
      console.error(err);
    ) else (
      console.log('File has been written.', name);
    )
  ));
)

files.forEach(async |file, i| => (
  let dir = path.dirname(file.relPath)
  let fileAbsPath = path.join(__dirname, file.relPath)
  let ext = `.{file.type}.js`
  builder.buildFile(fileAbsPath, ext)
  let f = path.basename(file.relPath).slice(0, -5)+ext
  let f2
  if (file.type === 'html' && useIndexHtmlFiles) (
    f2 = outDir+path.basename(file.relPath).slice(0, -5)+'/index.html'
  ) else (
    f2 = outDir+path.basename(file.relPath).slice(0, -5)+ext.slice(0,-3)
  )
  let result = await import(`./{tmpDirName}{path.join(buildDirName, dir)}/{f}`);
  let defaut = result.default
  saveFile(f2, defaut)
  // code = code + `import imp{i} from "./{path.join(buildDirName, dir)}/{f}"`+'\n' // FIXME parse newline at the end
  // "FIXME"
))

// FIXME: imports, import should not be a keyword here...

// code = code + @`

// function saveFile(name, content) {
//   fs.writeFileSync(name, content, (err) => {
//     if (err) {
//       console.error(err);
//     } else {
//       console.log('File has been written.', name);
//     }
//   });
// }

// `

// files.forEach(|file, i| => (
//   let ext2 = `.{file.type}.js`
//   let f2
//   if (file.type === 'html' && useIndexHtmlFiles) (
//     f2 = outDir+path.basename(file.relPath).slice(0, -5)+'/index.html'
//   ) else (
//     f2 = outDir+path.basename(file.relPath).slice(0, -5)+ext2.slice(0,-3)
//   )
//   code = code + `saveFile("{f2}", imp{i})`+'\n' // FIXME parse newline at the end
//   "FIXME"
// ))

// let linker = './.jome/build.js'
// fs.writeFileSync(linker, code)
// await import(linker);