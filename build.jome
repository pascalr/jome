// At first, I will just do everything I need to do here, after I will abstract it to be used by jomec.

import {globSync} from 'glob'
import fs from 'fs'
import path from 'path'

import { buildFileV2 } from './src/builder.js';

// THE FILES MUST NOT ONLY BE COMPILED, THEY MUST BE RUN...

// Take the files, compile them as .js files inside a hidden .jome folder
// Then write a build.jome file inside the hidden .jome folder that simply imports
// the default from every compiled file, and write the result into the out directory.

let cssFiles = globSync('app/css/*.jome')
let htmlFiles = globSync('app/views/*.jome')

let tmpDir = '.jome/'
let outDir = 'docs/'

let files = []
cssFiles.forEach(file => (
  files.push({:file, ext: '.css.js'})
))

htmlFiles.forEach(file => (
  files.push({:file, ext: '.html.js'})
))

let code = ''

files.forEach(|file, i| => (
  buildFileV2(file.file, tmpDir, file.ext)
  let f = path.basename(file.file).slice(0, -5)+file.ext
  code = code + `import imp{i} from "./.jome/{f}"`+'\n' // FIXME parse newline at the end
  "FIXME"
))

// FIXME: imports, import should not be a keyword here...

code = code + @`

function saveFile(name, content) {
  fs.writeFileSync(content, content, (err) => {
    if (err) {
      console.error(err);
    } else {
      console.log('File has been written.', name);
    }
  });
}

`

files.forEach(|file, i| => (
  let f2 = outDir+path.basename(file.file).slice(0, -5)+file.ext.slice(0,-3)
  code = code + `saveFile("{f2}", imp{i})`+'\n' // FIXME parse newline at the end
  "FIXME"
))

let linker = './__linkAll.built.js'
fs.writeFileSync(linker, code)
await import(linker);