// import {write, writeSync, build, compile, execSh} from '@jome/core'
// import mdToHtml of '@jome/md-to-html'
// import hljs of 'highlightjs-jome'
// import {trim, indent} of '@jome/core'
import mdToHtml : '@jome/md-to-html'
import hljs : 'highlightjs-jome'
import {trim, indent} : '@jome/core'
// import fs from 'fs'

def highlight(code)
  return hljs.highlight(code, { language: 'jome' }).value;
end

/*
TODO: Parse the whole config file before compiling .jomm imports in this file.
*/

return {
  main: "index.jome"
  // operators: {
  //   "==": (a, b) => a == b,
  //   "===": (a, b) => a === b
  // },
  formats: {
    "ex.jome": {chain: [indent, trim], wrap: highlight}
  },
  units: [{include: "#SI"}]
}

// // TODO: Remove forall, simply config here

// // Chain are functions here
// // Wrap are strings. They will be functions in the files using the tag.
// // TODO: Spellcheck
// return {
//   compiler: {
//     semicolons: true
//   },
//   tags: {
//     "jome-ex": {
//       wrap: "printExample"
//     }
//     "ex.jome": {
//       chain: [indent, trim]
//       wrap: "highlight"
//     }
//     "fr*": {
//       spellcheck: "fr"
//     }
//   },
//   utils: {
//     "#log": console.log,
//     "#keys": Object.keys,
//     "#values": Object.values,
//     "#entries": Object.entries,
//     "#PI": Math.PI,
//     "#argv": process.argv,
//     "#write": write,
//     "#writeSync": writeSync,
//     "#build": build,
//     "#compile": compile,
//     "#cp": fs.copyFile,
//     "#cp!": fs.copyFileSync,
//     "#mdToHtml": fs.copyFileSync,
//     "#execSh": execSh,
//   }
// }

// //   // FIXME: Ensures has one and only one arg
// //   trim: (node, args) => {handleTrim('trim', args)},
// //   strim: (node, args) => {handleTrim('trimStart', args)},
// //   trimStart: (node, args) => {handleTrim('trimStart', args)},
// //   etrim: (node, args) => {handleTrim('trimEnd', args)},
// //   trimEnd: (node, args) => {handleTrim('trimEnd', args)},
// //   // argv: (node) => {
// //   //   node.ctxFile.addImport('argv', null, 'jome-lib/argv')
// //   //   return `argv()`
// //   // },
// //   run: (node, args) => _run(node, false, args),
// //   "run!": (node, args) => _run(node, true, args),
// //   load: (node, args) => _run(node, false, args),
// //   "load!": (node, args) => _run(node, true, args),