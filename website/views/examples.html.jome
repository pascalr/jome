//<jome>#log "Hello, world!"</jome>
//<jome-ex>#log "Hello, world!"</jome-ex>

import &Webpage from '../src/webpage.jomm'

// TODO: forall div chain asIs end
// TODO: Have access to the beginning tag (with args!).
// As is would be a formatting that includes the tag itself in the string. Would be default for all html tags.

/*
There are many ways to group code.
You can decide to divide your code into html, css, and js.
You can also divide your code into components which have the 3 like in svelte.
It's just an opinion, there is no wrong way here.

Personally I think a mixture of both worlds is best.
It's nice to abstract and share some code between components.
And it's nice to define code only for a particular component.

By spliting into different files, it's more easy because you simply write different files and incorporate them.

But how do I write components? In different files too...
*/

//def printExample(result along source along code)  
def printExample(result)  
  // TODO: Add syntax highlighting without using md
  return <html>
    <div class='example'>
      <div class='onglets'>
        <div class='active'>Code</div>
        <div>Compiled</div>
        <div>Output</div>
      </div>
      <div class='example-content'><%= result %></div>
    </div>
  </html>
end

forall jome-ex wrap printExample end

def tabbedContent(contentByTitle)
  // let tabs = <div>
  //   <%= contentByTitle.#keys.map(title => <div><%= title %></div>) %>
  // </div>
  // return <div class="tabbed-content">
  //   <%= tabs %>
  //   <%= contentByTitle.#values.map(content => <div><%= content %></div>) %>
  // </div>
  let titles = contentByTitle.#keys.map(title => "<div>{title}</div>").join('\n')
  let contents = contentByTitle.#values.map(content => "<div>{content}</div>").join('\n')
  return "<div class='tabbed-content'>
    <div class='onglets'>
      {titles}
    </div>
    <div class='example-content'>
      {contents}
    </div>
  </div>"
end
  // <div class="tabbed-content">
  //   <div>
  //     <div class='selected'>Vanilla</div>
  //     <div>Web components</div>
  //     <div>React</div>
  //     <div>Vue.js</div>
  //     <div>Angular</div>
  //     <div>Svelte</div>
  //   </div>
  //   <div>First tab content</div>
  //   <div hidden>Second tab content</div>
  //   <div hidden>Third tab content</div>
  //   <div hidden>Fourth tab content</div>
  //   <div hidden>Fifth tab content</div>
  //   <div hidden>Sixth tab content</div>
  // </div>

// def parseExample(lines)
//   let str = lines.map(l => l[0]).join('\n')
//   return [[{code: `["${str}", ${str}]`}]]
// end

// jome tag should do three things
// give string of jome code
// give string of compiled js code
// give a function of jome code (or simply eval js code?)
// jomeCode = <jome>
//   x = 10
// </jome>
// but this could be something implemented only for here, because it is usefull only here

let counter = <jsx-react>
  import React, { useState } from 'react'; // I would be nice if this was optional because implicit because inside react tag

  const Counter = () => {
    // Define state variable 'count' with initial value 0 and a function 'setCount' to update it
    const [count, setCount] = useState(0);

    return <button onClick={setCount(count+1)}>
      Clicked {count} {count === 1 ? 'time' : 'times'}
    </button>
  };
</jsx-react>

// document.addEventListener("DOMContentLoaded", function () {
//   let el = document.getElementById("ex-vanilla-hello");
//   el.innerHTML = "Hello world! This is vanilla js!";

//   let count = 0;
//   let button = document.getElementById("ex-vanilla-counter");
//   button.addEventListener("click", function () {
//     count = count + 1;
//     button.textContent = `Clicked ${count} ${count === 1 ? "time" : "times"}`;
//   });
// });

let counters = {
  Vanilla: "Clicked 0 times",
  "Web components": "Clicked 0 times",
  "Vue.js": "Clicked 0 times",
  Angular: "Clicked 0 times",
  Svelte: "Clicked 0 times",
  React: "Clicked 0 times"
}

let content = <md>
  # Jome examples

  TODO: The result on top, and the tabbed source code for many librairies below.

  TODO: For hello world and the counter, write show the code for vanilla, web components, react, vue, angular, svelte, ...
  Show the code 75% of the space at the left, and 25% the simple counter button on the right (or Hello world message)

  <h2 id="hello-world">Hello world</h3>

  <%s <jome-ex>#log "Hello, world!"</jome-ex> %>

  <h3>Vanilla js</h3>

  <div id="ex-vanilla-hello"></div>

  ## Counter

  A simple counter that shows a dynamic element and an event listener.

  <div class="example-result"><button id="ex-vanilla-counter">Clicked 0 times</button></div>

  <%= tabbedContent(counters) %>

  A simple button that when you click on it it increments. "Clicked 2 times"

  <h3>Vanilla js</h3>

  <h3>Web components</h3>

  <h3 id="react-component">React component</h3>

  ```jome
  import React, { useState } from 'react';

  const Counter = () => {
    // Define state variable 'count' with initial value 0 and a function 'setCount' to update it
    const [count, setCount] = useState(0);

    return <react>
      <button onClick={setCount(count+1)}>
        Clicked {count} {count === 1 ? 'time' : 'times'}
      </button>
    </react>
  };
  ```

  ## Adder

  Un autre truc simple comme le compteur. 2 input fields, tu additionnes les inputs et tu les affichent.

  Voici le code svelte.

  ```svelte
  <script>
    export let a;
    export let b;
  </script>

  <input type="number" bind:value={a}>
  <input type="number" bind:value={b}>

  <p>{a} + {b} = {a + b}</p>
  ```

  <h3 id="html-library">Html library</h3>
  
  ```jome
  html = «
    IFrame // for demo only
      Html title: 'My html page'
        page: Col
          navbar: Row
            Link 'Some page'
            Link 'Another page'
            Link 'Yet another page'
  »
  ```

  <h3 id="snake">Snake</h3>

  <h3 id="html-button">Html button</h3>
  
  ```jome
  import {Btn, Txt, renderHTML} from "html"

  renderHTML(target: '#div-id', {
    Btn %count: 0, ~click: => (%count += 1)
      Txt => "Clicked {%count} {%count == 1 ? 'time' : 'times'}"
  })
  ```

  Example compiled JavaScript output:
  ```js
  import jome from 'jome_lib'
  import {Btn, Txt, renderHTML} from "html"

  var btn

  // Add a button to the scene which has a text as a children
  btn = new Btn({__signal__click: () => {this.count += 1}})
  btn.count = 0
  jome.createObj($, btn)
  jome.createObj($.$.$btn, new Txt(() => (
    `Clicked ${this.count} ${this.count == 1 ? 'time' : 'times'}`
  )))

  // Compile all the objects of the scene and write the html to #jome-placeholder div
  renderHTML({target: 'jome-placeholder'}, $)
  ```

  ## Recipe?

  ```jome
  {
    Recipe
      attr
        name: 'Chickpea balls'
        prepare: 1h
      Ing 1cup, "dry chickpeas"
      Ing 2cup, "water"
      Ing 2tbsp, "parmesan"
      Step `Put {@1} into {@2}...` // @1 is the first children
      Step "Mix ..."
      Step "Blah blah ..."
  }
  ```

  ## A format database like?

  ```jome
  data = {
    "comma", "separated", "values"
    1,       "foo",       10.0
    2,       "bar",       20.0
  }
  ```
  <csv>
    "comma", "separated", "values"
    1,       "foo",       10.0
    2,       "bar",       20.0
  </csv>

  ## Sqlite3 export to CSV JavaScript

  Faire un petit script en Jome qui convertit un fichier .sqlite3 en un dossier avec des .csv pour chaques table un .csv pour le metadata

  TODO: Save metadata too.

  ```jome
  let tables = <sh>sqlite3 < % = ARGV[1] % > ".table"</sh>
  <sh>mkdir < % = ARGV[2] % ></sh>
  tables#each(table => (
    <sh>sqlite3 -header -csv < % = ARGV[1] % > "select * from < % = table % >;" > < % = table % >.csv</sh>
  ))
  ```

  <script src="<%= ROOT %>/js/ex_vanilla.js"></script>
</md>

return Webpage('Jome examples', content).render()