import {AppPage} from './app.jome'

import hljs from 'highlight.js/lib/core'
import jomeHljs from '../highlight.js/jome.js'

hljs.registerLanguage('jome', jomeHljs)

<css>
  pre {
    background-color: #dce0e8;
    padding: 1em;
    border-radius: 8px;
  }
  code:not(pre code) {
    background-color: #dce0e8;
    padding: 0.5em;
    border-radius: 8px;
  }
</css>

codeBlock = |code| => <html>
  <pre>
    <code>
      <%= hljs.highlight(code, {language: 'jome'}).value %>
    </code>
  </pre>
</html>

«
  AppPage title: 'Simple HTML Page', content: (<md>

  # Jome

  Jome is a language that compiles in JavaScript. It is simliar to CoffeeScript in this way.

  The main idea is what I call instance driven development. It's the same thing as object oriented, but the focus is on the concrete object
  instead of the abstract class.

  Instance driven development is like in Godot. Most of the time you control objects directly inside the editor.

  It's intented main purpose is to be used for prototyping or small projects. It is usefull for concrete applications like making something visual.

  ## Overview

  Example Jome code:
</md>+codeBlock(`import Btn, Txt, renderHTML} from "html"`)+<md>
  ```
  import {Btn, Txt, renderHTML} from "html"

  // Add a button to the main scene ($) which has a text as a children
  $ <<
    Btn @count: 0, ~click: => (@count += 1)
      Txt => "Clicked {@count} {@count == 1 ? 'time' : 'times'}"
  >>

  // Compile all the objects of the scene and write the html to #jome-placeholder div
  renderHTML($, target: 'jome-placeholder')
  ```

  Example compiled JavaScript output:
  ```
  import jome from 'jome_lib'
  import {Btn, Txt, renderHTML} from "html"

  var $ = jome.createObj()
  var btn

  // Add a button to the scene which has a text as a children
  btn = new Btn({__signal__click: () => {this.count += 1}})
  btn.count = 0
  jome.createObj($, btn)
  jome.createObj($.$.$btn, new Txt(() => (
    `Clicked ${this.count} ${this.count == 1 ? 'time' : 'times'}`
  )))

  // Compile all the objects of the scene and write the html to #jome-placeholder div
  renderHTML({target: 'jome-placeholder'}, $)
  ```

  ## Installation

  TODO

  ## Usage

  TODO: Expliquer comment compiler du code .jome en code JavaScript.

  <h2 id="lang-ref">Language Reference</h2>

  There is two main modes in the language.

  Code mode: This is very similar to JavaScript, with a few distinction. Blocks are delimited using parentheses instead of curly braces {}. Curly
  braces are only used for dictionaries (JavaScript objects) and in some others cases like imports.

  Object mode: Object blocks delimited by « » or << >> use indentation to make a tree of objects. «» is for an orphan object which has not parent.
  << >> is used to push objects as a children to an existing object.

  $ is the main object
  $foo/bar is a path to get the children of the main object named foo, and then get it's children named bar

  `$ << $foo >>` => add an object named foo inside the main object '$'

  ### Functions

  TODO: Ajouter les functions -> à jome. Il doit y avoir un espace avant le -> pour que ce soit une fonction. Sinon, c'est le meta accessor.

  ### Scripts

  In jome, the idea is that you could include most other programming languages directly using xml tags.

  ```
  // Execute a shell command in a script
  <sh>ls -A</sh>

  // Ruby is a pretty nice language for scripts too 
  <rb>puts (1..10).select(&:even?).sum</rb>
  ```

  #### Scripts interpolation

  You can add data inside the scripts using the < % =    % > syntax.

  Contrary to other template languages like ejs, you must finish the expression given inside the interpolation tag.

  If you want to do a condition for example, you use a nesting tag < > ... < / >

  < % = if true < >
    <div class="content">
      < % = content % >
    </div>
  else < >
    <div class="content">
      < % = content % >
    </div>
  < / > % >

  The behavior will depend on the kind of script.

  On html, it will insert a template literal interpolation.

  On markdown what do I want to do?

  Logically, it would include markdown. But this mean that some markdown would be compiled at compile time,
  and that the text inside the interpolation would be compiled at run time. I don't like this because I don't
  want the built file to include the javascript of markdown-it. But this could be a feature if that is actually
  what the user want.

  But right now, I am the user and this is not what I want. So what I want is that the text to be interpolated
  be removed from the markdown compile, and that inserted compiled using a template literal.

  Basically, I want to inject html and not inject markdown directly.

</md>)
».print()